{
	"openapi": "3.1.0",
	"info": {
		"title": "Chain Labs Backend API",
		"description": "Dummy server for frontend integration",
		"version": "1.0.0"
	},
	"paths": {
		"/health": {
			"get": {
				"summary": "Health Check",
				"description": "Health check endpoint.",
				"operationId": "health_check_health_get",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				}
			}
		},
		"/api/auth/session": {
			"post": {
				"tags": ["Authentication"],
				"summary": "Create Session",
				"description": "Create a new anonymous session with JWT tokens.\n\n**Description:**\nThis is the entry point for all users. Creates a new session and returns \nJWT access and refresh tokens that expire in 1 year. No authentication \nrequired - this creates the initial session.\n\n**When to use:**\n- At the start of a user's journey (app initialization)\n- When no valid session exists\n- For anonymous users who want to start using the platform\n\n**Request:**\nNo request body required - this is a simple POST request.\n\n**Response Example:**\n```json\n{\n    \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"expires_in\": 31536000,\n    \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"refresh_expires_in\": 31536000\n}\n```\n\n**Usage Example:**\n```javascript\nconst response = await fetch('/api/auth/session', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' }\n});\nconst { access_token, refresh_token } = await response.json();\n\n// Store tokens for future requests\nlocalStorage.setItem('access_token', access_token);\nlocalStorage.setItem('refresh_token', refresh_token);\n```\n\n**Error Cases:**\n- **500 Internal Server Error**: JWT generation failed (server issue)\n\n**Notes:**\n- Tokens expire in 1 year (31,536,000 seconds)\n- Store both tokens securely on the client\n- Use access_token for authenticated requests\n- Use refresh_token to get new tokens when needed",
				"operationId": "create_session_api_auth_session_post",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/src__models__auth__SessionResponse"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": ["Authentication"],
				"summary": "Revoke Session",
				"description": "Revoke (blacklist) a refresh token, ending the session.\n\n**Description:**\nExplicitly revokes a refresh token, making it unusable for future token \nrefreshes. This is a security endpoint for \"logout\" functionality or when \nyou suspect a token has been compromised.\n\n**When to use:**\n- User logout functionality\n- When you suspect a token has been compromised\n- To clean up old sessions\n- Security best practice when user changes sensitive account details\n\n**Authentication Required:**\nThis endpoint requires a valid Bearer token in the Authorization header.\n\n**Request Headers:**\n```\nAuthorization: Bearer \u003Caccess_token\u003E\nContent-Type: application/json\n```\n\n**Request Body:**\n```json\n{\n    \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}\n```\n\n**Response Example:**\n```json\n{\n    \"revoked\": true\n}\n```\n\n**Usage Example:**\n```javascript\nconst accessToken = localStorage.getItem('access_token');\nconst refreshToken = localStorage.getItem('refresh_token');\n\nconst response = await fetch('/api/auth/session', {\n    method: 'DELETE',\n    headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ refresh_token: refreshToken })\n});\n\nif (response.ok) {\n    // Clean up stored tokens\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    // Redirect to login page\n    window.location.href = '/login';\n}\n```\n\n**Error Cases:**\n- **400 Bad Request**: Missing refresh_token in request body\n- **401 Unauthorized**: Missing or invalid Authorization header\n- **401 Unauthorized**: Invalid or expired access token\n- **500 Internal Server Error**: Revocation failed (server issue)\n\n**Security Notes:**\n- Once revoked, the refresh token cannot be used again\n- The access token remains valid until its natural expiration\n- Consider this a \"soft logout\" - user can still use access token temporarily\n- For complete logout, client should also discard the access token",
				"operationId": "revoke_session_api_auth_session_delete",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RevokeRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RevokeResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				},
				"security": [
					{
						"HTTPBearer": []
					}
				]
			}
		},
		"/api/auth/refresh": {
			"post": {
				"tags": ["Authentication"],
				"summary": "Refresh Token",
				"description": "Exchange a valid refresh token for new access and refresh tokens.\n\n**Description:**\nRotates JWT tokens using a valid refresh token. This endpoint provides \na security mechanism to get fresh tokens without requiring the user to \nre-authenticate. The old refresh token is automatically revoked.\n\n**When to use:**\n- Before making API calls with an expired or soon-to-expire access token\n- Periodically to maintain session security (token rotation)\n- When you want to ensure you have the latest tokens\n- In response to 401 errors from other endpoints\n\n**Request Body:**\n```json\n{\n    \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}\n```\n\n**Response Example:**\n```json\n{\n    \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"expires_in\": 31536000,\n    \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"refresh_expires_in\": 31536000\n}\n```\n\n**Usage Example:**\n```javascript\nconst refreshToken = localStorage.getItem('refresh_token');\n\nconst response = await fetch('/api/auth/refresh', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ refresh_token: refreshToken })\n});\n\nif (response.ok) {\n    const { access_token, refresh_token } = await response.json();\n    localStorage.setItem('access_token', access_token);\n    localStorage.setItem('refresh_token', refresh_token);\n}\n```\n\n**Error Cases:**\n- **400 Bad Request**: Missing or malformed refresh_token in request body\n- **401 Unauthorized**: Invalid, expired, or revoked refresh token\n- **401 Unauthorized**: Session no longer exists\n- **500 Internal Server Error**: JWT rotation failed (server issue)\n\n**Security Notes:**\n- Old refresh token is automatically revoked after successful rotation\n- Always update stored tokens with the new ones returned\n- Refresh tokens have the same expiry as access tokens (1 year)\n- Failed refresh attempts may indicate compromised tokens",
				"operationId": "refresh_token_api_auth_refresh_post",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RefreshRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RefreshResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/goal": {
			"post": {
				"tags": ["Goals & Personalization"],
				"summary": "Submit Goal",
				"description": "Parse raw user input into a structured goal and return personalized content.\n\n**Description:**\nThis is the core endpoint that transforms a user's raw input into a structured \ngoal and generates personalized missions, case studies, and headlines. This \ncreates the foundation for the user's journey through the platform.\n\n**When to use:**\n- When a user first describes what they want to build/achieve\n- At the start of the goal-setting process\n- When user wants to start a new project or objective\n\n**Authentication Required:**\nRequires a valid Bearer token in the Authorization header.\n\n**Request Headers:**\n```\nAuthorization: Bearer \u003Caccess_token\u003E\nContent-Type: application/json\n```\n\n**Request Body:**\n```json\n{\n    \"input\": \"I want to build an AI agent for restaurants\"\n}\n```\n\n**Input Guidelines:**\n- Be specific about what you want to build or achieve\n- Include context about your domain (e.g., \"restaurants\", \"e-commerce\")\n- Mention your primary objective or problem to solve\n- Examples: \"Build a chatbot for customer service\", \"Create a recommendation system\"\n\n**Response Example:**\n```json\n{\n    \"assistantMessage\": {\n        \"message\": \"I have received your goal. What is your primary objective?\",\n        \"datetime\": \"2023-10-27T10:00:00Z\"\n    },\n    \"history\": [\n        {\n            \"role\": \"user\",\n            \"message\": \"I want to build an AI agent for restaurants\",\n            \"datetime\": \"2023-10-27T09:59:00Z\"\n        }\n    ]\n}\n```\n\n**Usage Example:**\n```javascript\nconst accessToken = localStorage.getItem('access_token');\n\nconst response = await fetch('/api/goal', {\n    method: 'POST',\n    headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        input: \"I want to build an AI agent for restaurants\"\n    })\n});\n\nconst goalData = await response.json();\nconsole.log('Generated missions:', goalData.missions.length);\nconsole.log('Headline:', goalData.headline);\n```\n\n**Error Cases:**\n- **400 Bad Request**: Empty or whitespace-only input\n- **401 Unauthorized**: Missing or invalid Authorization header\n- **404 Not Found**: Session not found (invalid session ID in token)\n- **500 Internal Server Error**: Goal parsing or generation failed\n\n**What happens next:**\n1. Goal is stored in your session\n2. Missions become available for completion\n3. Use `/api/progress` to track mission completion\n4. Use `/api/mission/complete` to complete missions and earn points\n\n**Notes:**\n- This endpoint can only be called once per session\n- Subsequent calls will overwrite the previous goal\n- Use `/api/clarify` if you need to refine the goal\n- The generated missions are tailored to your specific input",
				"operationId": "submit_goal_api_goal_post",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GoalRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GoalResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				},
				"security": [
					{
						"HTTPBearer": []
					}
				]
			}
		},
		"/api/clarify": {
			"post": {
				"tags": ["Goals & Personalization"],
				"summary": "Clarify Goal",
				"description": "Refine and clarify an existing goal with additional context.\n\n**Description:**\nAllows users to provide additional clarification or refinement to their \npreviously submitted goal. This endpoint updates the goal description and \nregenerates personalized content (missions, case studies, headlines) based \non the new context.\n\n**When to use:**\n- After submitting a goal via `/api/goal`\n- When you want to add more specific details to your goal\n- To pivot or refine the direction of your project\n- When the initial personalization needs adjustment\n\n**Prerequisites:**\n- Must have already submitted a goal via `/api/goal`\n- Session must contain an existing goal\n\n**Authentication Required:**\nRequires a valid Bearer token in the Authorization header.\n\n**Request Headers:**\n```\nAuthorization: Bearer \u003Caccess_token\u003E\nContent-Type: application/json\n```\n\n**Request Body:**\n```json\n{\n    \"clarification\": \"Focus on customer satisfaction and reducing wait times\"\n}\n```\n\n**Clarification Examples:**\n- \"Focus on customer satisfaction\"\n- \"Specifically for fine dining restaurants\"\n- \"Must integrate with existing POS systems\"\n- \"Primary goal is cost reduction\"\n- \"Target small restaurants with limited tech experience\"\n\n**Response Example:**\n```json\n{\n    \"goal\": {\n        \"description\": \"Build an AI solution for restaurant operations: I want to build an AI agent for restaurants - Clarified: Focus on customer satisfaction and reducing wait times\",\n        \"category\": \"hospitality\",\n        \"priority\": \"high\"\n    },\n    \"missions\": [\n        {\n            \"id\": \"identifyKPIs\",\n            \"title\": \"Identify Key Performance Indicators\",\n            \"points\": 10,\n            \"status\": \"pending\"\n        }\n    ],\n    \"headline\": \"Customer Experience AI: Personalize Dining with Advanced Analytics\",\n    \"recommended_case_studies\": [\n        {\n            \"id\": \"cs4\",\n            \"title\": \"Customer Insights\",\n            \"summary\": \"Enhanced customer satisfaction by 40% using sentiment analysis\"\n        }\n    ]\n}\n```\n\n**Usage Example:**\n```javascript\nconst accessToken = localStorage.getItem('access_token');\n\nconst response = await fetch('/api/clarify', {\n    method: 'POST',\n    headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        clarification: \"Focus on customer satisfaction and reducing wait times\"\n    })\n});\n\nconst updatedGoal = await response.json();\nconsole.log('Updated goal:', updatedGoal.goal.description);\nconsole.log('New missions:', updatedGoal.missions.length);\n```\n\n**Error Cases:**\n- **400 Bad Request**: Empty or whitespace-only clarification\n- **401 Unauthorized**: Missing or invalid Authorization header\n- **404 Not Found**: Session not found or no existing goal in session\n- **500 Internal Server Error**: Clarification processing failed\n\n**Important Notes:**\n- This updates your existing goal, not creates a new one\n- Previous mission progress is **reset** when clarifying\n- New missions are generated based on the updated goal\n- You can call this endpoint multiple times to further refine\n- The clarification is appended to the original goal description\n\n**Workflow Integration:**\n1. Submit initial goal via `/api/goal`\n2. Review generated missions and content\n3. Use `/api/clarify` to refine if needed\n4. Proceed with mission completion via `/api/mission/complete`",
				"operationId": "clarify_goal_api_clarify_post",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ClarifyRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ClarifyResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				},
				"security": [
					{
						"HTTPBearer": []
					}
				]
			}
		},
		"/api/personalised": {
			"get": {
				"tags": ["Goals & Personalization"],
				"summary": "Get Personalized Content",
				"description": "Retrieve all personalized content for the current session.\n\n**Description:**\nFetches all personalized content generated for your session, including \nthe structured goal, personalized missions, headline, and recommended \ncase studies. This is a read-only endpoint to retrieve existing \npersonalization data.\n\n**When to use:**\n- To refresh/reload personalized content in your UI\n- When reconnecting after a session break\n- To display goal and mission information on different pages\n- For caching and offline functionality\n- When you need to show current personalization status\n\n**Prerequisites:**\n- Must have submitted a goal via `/api/goal` first\n- Session must contain personalized content\n\n**Authentication Required:**\nRequires a valid Bearer token in the Authorization header.\n\n**Request Headers:**\n```\nAuthorization: Bearer \u003Caccess_token\u003E\n```\n\n**No Request Body Required:**\nThis is a GET request - no request body needed.\n\n**Response Example:**\n```json\n{\n    \"headline\": \"AI Agent for Restaurants: Increase Table Turnover with Contextual Suggestions\",\n    \"goal\": {\n        \"description\": \"Build an AI solution for restaurant operations: I want to build an AI agent for restaurants\",\n        \"category\": \"hospitality\",\n        \"priority\": \"high\"\n    },\n    \"missions\": [\n        {\n            \"id\": \"defineMetrics\",\n            \"title\": \"Define Success Metrics\",\n            \"points\": 15,\n            \"status\": \"pending\"\n        },\n        {\n            \"id\": \"sketchFlow\",\n            \"title\": \"Sketch User Flow\",\n            \"points\": 15,\n            \"status\": \"pending\"\n        }\n    ],\n    \"recommended_case_studies\": [\n        {\n            \"id\": \"cs1\",\n            \"title\": \"Booking Optimizer\",\n            \"summary\": \"Reduced booking latency by 80% with AI-powered recommendations\"\n        },\n        {\n            \"id\": \"cs2\",\n            \"title\": \"Menu Intelligence\",\n            \"summary\": \"Increased revenue 30% through personalized menu suggestions\"\n        }\n    ]\n}\n```\n\n**Usage Example:**\n```javascript\nconst accessToken = localStorage.getItem('access_token');\n\nconst response = await fetch('/api/personalised', {\n    method: 'GET',\n    headers: {\n        'Authorization': `Bearer ${accessToken}`\n    }\n});\n\nif (response.ok) {\n    const personalization = await response.json();\n    \n    // Update UI with personalized content\n    document.getElementById('headline').textContent = personalization.headline;\n    document.getElementById('goal-desc').textContent = personalization.goal.description;\n    \n    // Render missions\n    const missionsList = personalization.missions.map(mission =\u003E \n        `\u003Cli\u003E${mission.title} (${mission.points} points)\u003C/li\u003E`\n    ).join('');\n    document.getElementById('missions').innerHTML = missionsList;\n}\n```\n\n**Error Cases:**\n- **401 Unauthorized**: Missing or invalid Authorization header\n- **404 Not Found**: Session not found\n- **404 Not Found**: No personalized content found (haven't submitted goal yet)\n- **500 Internal Server Error**: Personalization retrieval failed\n\n**Response Data Structure:**\n- **headline**: Catchy title for your project/goal\n- **goal**: Structured goal object with description, category, priority\n- **missions**: Array of available missions with IDs, titles, points, status\n- **recommended_case_studies**: Relevant case studies for inspiration\n\n**Integration Tips:**\n- Cache this data in your frontend for offline access\n- Use mission IDs for completion tracking\n- Display case studies as inspiration/examples\n- Show progress by comparing mission statuses with `/api/progress`\n\n**Workflow Context:**\n1. User submits goal via `/api/goal` → personalization created\n2. User can clarify via `/api/clarify` → personalization updated  \n3. Use this endpoint → retrieve current personalization\n4. Complete missions via `/api/mission/complete`\n5. Check progress via `/api/progress`",
				"operationId": "get_personalized_content_api_personalised_get",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PersonalizedResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"HTTPBearer": []
					}
				]
			}
		},
		"/api/progress": {
			"get": {
				"tags": ["Missions & Progress"],
				"summary": "Get Progress",
				"description": "Get current mission progress, points, and unlock status.\n\n**Description:**\nRetrieves the complete progress overview for your session, including \nindividual mission statuses (pending/completed), total points earned, \nand whether special features like the free call are unlocked.\n\n**When to use:**\n- To display a progress dashboard or overview\n- After completing missions to see updated totals\n- To check current unlock status\n- For progress tracking and gamification UI\n- When resuming a session to see where you left off\n\n**Authentication Required:**\nRequires a valid Bearer token in the Authorization header.\n\n**Request Headers:**\n```\nAuthorization: Bearer \u003Caccess_token\u003E\n```\n\n**No Request Body Required:**\nThis is a GET request - no request body needed.\n\n**Response Example:**\n```json\n{\n    \"points_total\": 45,\n    \"missions\": [\n        {\n            \"id\": \"defineMetrics\",\n            \"status\": \"completed\",\n            \"points\": 15\n        },\n        {\n            \"id\": \"sketchFlow\", \n            \"status\": \"completed\",\n            \"points\": 15\n        },\n        {\n            \"id\": \"buildPrototype\",\n            \"status\": \"pending\",\n            \"points\": 25\n        },\n        {\n            \"id\": \"runDemo\",\n            \"status\": \"pending\", \n            \"points\": 20\n        }\n    ],\n    \"call_unlocked\": true\n}\n```\n\n**Usage Example:**\n```javascript\nconst accessToken = localStorage.getItem('access_token');\n\nconst response = await fetch('/api/progress', {\n    method: 'GET',\n    headers: {\n        'Authorization': `Bearer ${accessToken}`\n    }\n});\n\nconst progress = await response.json();\n\n// Update progress UI\ndocument.getElementById('total-points').textContent = progress.points_total;\ndocument.getElementById('unlock-status').textContent = \n    progress.call_unlocked ? 'Call Unlocked!' : 'Complete more missions to unlock call';\n\n// Show mission progress\nconst completedCount = progress.missions.filter(m =\u003E m.status === 'completed').length;\nconst totalCount = progress.missions.length;\ndocument.getElementById('progress-bar').style.width = \n    `${(completedCount / totalCount) * 100}%`;\n```\n\n**Error Cases:**\n- **401 Unauthorized**: Missing or invalid Authorization header\n- **404 Not Found**: Session not found (invalid session ID in token)\n- **500 Internal Server Error**: Progress calculation failed\n\n**Response Fields:**\n- **points_total**: Total points earned across all completed missions\n- **missions**: Array of all missions with current status and point values\n- **call_unlocked**: Boolean indicating if free call feature is available\n\n**Mission Status Values:**\n- **\"pending\"**: Mission is available but not yet completed\n- **\"completed\"**: Mission has been finished and points awarded\n\n**Unlock Logic:**\n- Call feature unlocks after completing 2 or more missions\n- Points accumulate with each completed mission\n- Unlock status persists throughout the session\n\n**Integration Notes:**\n- Use this endpoint to build progress dashboards\n- Combine with `/api/mission/complete` for mission completion flow\n- Check unlock status before showing premium features\n- Cache progress data and refresh after mission completions",
				"operationId": "get_progress_api_progress_get",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProgressResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"HTTPBearer": []
					}
				]
			}
		},
		"/api/mission/complete": {
			"post": {
				"tags": ["Missions & Progress"],
				"summary": "Complete Mission",
				"description": "Complete a mission by submitting your solution and earn points.\n\n**Description:**\nSubmit your completed work for a specific mission to earn points and \nunlock progress. This endpoint validates your submission, awards points, \nupdates your progress, and may unlock special features like the free call.\n\n**When to use:**\n- When you've finished working on a mission\n- To submit your solution/artifact for a specific mission\n- To earn points and progress through the system\n- After completing tasks like \"Define Success Metrics\" or \"Sketch User Flow\"\n\n**Prerequisites:**\n- Must have submitted a goal via `/api/goal` first\n- Mission must exist in your personalized mission list\n- Mission must not already be completed\n\n**Authentication Required:**\nRequires a valid Bearer token in the Authorization header.\n\n**Request Headers:**\n```\nAuthorization: Bearer \u003Caccess_token\u003E\nContent-Type: application/json\n```\n\n**Request Body:**\n```json\n{\n    \"mission_id\": \"defineMetrics\",\n    \"artifact\": {\n        \"answer\": \"Key metrics: Customer satisfaction (CSAT), table turnover rate, average order value, wait time reduction percentage, staff efficiency score\"\n    }\n}\n```\n\n**Mission ID Examples:**\n- `\"defineMetrics\"` - Define Success Metrics\n- `\"sketchFlow\"` - Sketch User Flow  \n- `\"buildPrototype\"` - Build Initial Prototype\n- `\"runDemo\"` - Run the AI demo\n- `\"identifyKPIs\"` - Identify Key Performance Indicators\n- `\"testUsability\"` - Test User Experience\n\n**Artifact Guidelines:**\n- **Be specific**: Provide detailed, actionable content\n- **Show thinking**: Explain your reasoning and approach\n- **Include examples**: Give concrete examples where relevant\n- **Quality matters**: Thoughtful responses may influence future personalization\n\n**Response Example:**\n```json\n{\n    \"points_awarded\": 15,\n    \"points_total\": 30,\n    \"call_unlocked\": false,\n    \"next_mission\": {\n        \"id\": \"sketchFlow\",\n        \"title\": \"Sketch User Flow\", \n        \"points\": 15,\n        \"status\": \"pending\"\n    }\n}\n```\n\n**Usage Example:**\n```javascript\nconst accessToken = localStorage.getItem('access_token');\n\nconst missionData = {\n    mission_id: \"defineMetrics\",\n    artifact: {\n        answer: \"Key metrics: Customer satisfaction (CSAT), table turnover rate, average order value, wait time reduction percentage, staff efficiency score\"\n    }\n};\n\nconst response = await fetch('/api/mission/complete', {\n    method: 'POST',\n    headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(missionData)\n});\n\nif (response.ok) {\n    const result = await response.json();\n    \n    // Update UI with progress\n    console.log(`Earned ${result.points_awarded} points!`);\n    console.log(`Total points: ${result.points_total}`);\n    \n    if (result.call_unlocked) {\n        document.getElementById('call-button').disabled = false;\n        showNotification('🎉 Free call unlocked!');\n    }\n    \n    // Show next mission if available\n    if (result.next_mission) {\n        console.log(`Next: ${result.next_mission.title}`);\n    }\n}\n```\n\n**Error Cases:**\n- **400 Bad Request**: Missing mission_id or empty artifact answer\n- **401 Unauthorized**: Missing or invalid Authorization header\n- **403 Forbidden**: Mission already completed (can't complete twice)\n- **404 Not Found**: Session not found or mission doesn't exist\n- **500 Internal Server Error**: Mission completion processing failed\n\n**Response Fields:**\n- **points_awarded**: Points earned for this specific mission\n- **points_total**: Updated total points across all missions  \n- **call_unlocked**: Whether free call feature is now available\n- **next_mission**: Suggested next mission to work on (if available)\n\n**Progression Logic:**\n- Each mission can only be completed once\n- Points are awarded immediately upon completion\n- Call unlocks after completing 2+ missions\n- Next mission suggestion helps guide your journey\n\n**Integration Tips:**\n- Always check response for unlock status changes\n- Use next_mission to guide user to next step\n- Update local progress state after successful completion\n- Consider showing celebration UI for point awards\n- Refresh `/api/progress` to get complete updated status",
				"operationId": "complete_mission_api_mission_complete_post",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CompleteMissionRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CompleteMissionResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				},
				"security": [
					{
						"HTTPBearer": []
					}
				]
			}
		},
		"/api/unlock-status": {
			"get": {
				"tags": ["Missions & Progress"],
				"summary": "Check Unlock Status",
				"description": "Quick check whether premium features are unlocked.\n\n**Description:**\nA lightweight endpoint to quickly check if the user has unlocked \npremium features (specifically the free call feature) without \nfetching full progress data. Useful for UI state management and \nfeature gating.\n\n**When to use:**\n- Before showing/hiding premium feature buttons\n- In UI components that need to check unlock status\n- When you only need unlock status, not full progress\n- For feature gating in navigation or menus\n- To conditionally enable/disable premium actions\n\n**Authentication Required:**\nRequires a valid Bearer token in the Authorization header.\n\n**Request Headers:**\n```\nAuthorization: Bearer \u003Caccess_token\u003E\n```\n\n**No Request Body Required:**\nThis is a GET request - no request body needed.\n\n**Response Example (Unlocked):**\n```json\n{\n    \"call_unlocked\": true\n}\n```\n\n**Response Example (Still Locked):**\n```json\n{\n    \"call_unlocked\": false\n}\n```\n\n**Usage Example:**\n```javascript\nconst accessToken = localStorage.getItem('access_token');\n\nconst response = await fetch('/api/unlock-status', {\n    method: 'GET',\n    headers: {\n        'Authorization': `Bearer ${accessToken}`\n    }\n});\n\nconst { call_unlocked } = await response.json();\n\n// Update UI based on unlock status\nconst callButton = document.getElementById('schedule-call-btn');\nconst lockIcon = document.getElementById('call-lock-icon');\n\nif (call_unlocked) {\n    callButton.disabled = false;\n    callButton.textContent = 'Schedule Free Call';\n    lockIcon.style.display = 'none';\n} else {\n    callButton.disabled = true;\n    callButton.textContent = 'Complete missions to unlock';\n    lockIcon.style.display = 'inline';\n}\n```\n\n**React Component Example:**\n```javascript\nconst [callUnlocked, setCallUnlocked] = useState(false);\n\nuseEffect(() =\u003E {\n    const checkUnlockStatus = async () =\u003E {\n        try {\n            const response = await fetch('/api/unlock-status', {\n                headers: { 'Authorization': `Bearer ${token}` }\n            });\n            const { call_unlocked } = await response.json();\n            setCallUnlocked(call_unlocked);\n        } catch (error) {\n            console.error('Failed to check unlock status:', error);\n        }\n    };\n    \n    checkUnlockStatus();\n}, [token]);\n\nreturn (\n    \u003Cbutton \n        disabled={!callUnlocked}\n        className={callUnlocked ? 'btn-primary' : 'btn-disabled'}\n    \u003E\n        {callUnlocked ? '📞 Schedule Call' : '🔒 Complete 2+ missions'}\n    \u003C/button\u003E\n);\n```\n\n**Error Cases:**\n- **401 Unauthorized**: Missing or invalid Authorization header\n- **404 Not Found**: Session not found (invalid session ID in token)\n\n**Unlock Logic:**\n- **Free call unlocks** after completing **2 or more missions**\n- Status persists throughout the session\n- Completing additional missions keeps it unlocked\n- Status resets only when starting a new session\n\n**Performance Notes:**\n- This is a lightweight endpoint (faster than `/api/progress`)\n- Safe to call frequently for UI updates\n- Consider caching the result and refreshing after mission completions\n- No need to call on every page load if result is cached\n\n**Integration Patterns:**\n- Use with `/api/mission/complete` responses to avoid extra calls\n- Cache unlock status in local state management (Redux, Zustand, etc.)\n- Refresh after any mission completion\n- Use for conditional rendering of premium features\n\n**Related Endpoints:**\n- Use `/api/progress` for complete mission status and points\n- Use `/api/mission/complete` to actually unlock features\n- Response `call_unlocked` field matches `/api/progress` response",
				"operationId": "check_unlock_status_api_unlock_status_get",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnlockStatusResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"HTTPBearer": []
					}
				]
			}
		},
		"/api/session": {
			"get": {
				"tags": ["Session Management"],
				"summary": "Get Full Session",
				"description": "Retrieve complete session state for frontend hydration.\n\n**Description:**\nFetches the complete session state in a single request, including goal \ninformation, mission statuses with progress, total points earned, and \nunlock status. This is the primary endpoint for hydrating your frontend \napplication state when users return to the platform.\n\n**When to use:**\n- When user refreshes the page or returns to the app\n- For initial app load after authentication\n- To restore complete application state from server\n- When you need both goal data AND progress data together\n- For building a comprehensive dashboard view\n\n**Prerequisites:**\n- Must have submitted a goal via `/api/goal` first\n- Session must contain goal and mission data\n\n**Authentication Required:**\nRequires a valid Bearer token in the Authorization header.\n\n**Request Headers:**\n```\nAuthorization: Bearer \u003Caccess_token\u003E\n```\n\n**No Request Body Required:**\nThis is a GET request - no request body needed.\n\n**Response Example:**\n```json\n{\n    \"goal\": {\n        \"description\": \"Build an AI solution for restaurant operations: I want to build an AI agent for restaurants\",\n        \"category\": \"hospitality\",\n        \"priority\": \"high\"\n    },\n    \"missions\": [\n        {\n            \"id\": \"defineMetrics\",\n            \"status\": \"completed\",\n            \"points\": 15\n        },\n        {\n            \"id\": \"sketchFlow\",\n            \"status\": \"completed\", \n            \"points\": 15\n        },\n        {\n            \"id\": \"buildPrototype\",\n            \"status\": \"pending\",\n            \"points\": 25\n        },\n        {\n            \"id\": \"runDemo\",\n            \"status\": \"pending\",\n            \"points\": 20\n        }\n    ],\n    \"points_total\": 30,\n    \"call_unlocked\": true\n}\n```\n\n**Usage Example (Frontend Hydration):**\n```javascript\nconst accessToken = localStorage.getItem('access_token');\n\nconst hydrateApp = async () =\u003E {\n    try {\n        const response = await fetch('/api/session', {\n            method: 'GET',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`\n            }\n        });\n        \n        if (response.ok) {\n            const sessionState = await response.json();\n            \n            // Hydrate goal information\n            setGoal(sessionState.goal);\n            \n            // Hydrate mission progress\n            setMissions(sessionState.missions);\n            setTotalPoints(sessionState.points_total);\n            \n            // Update unlock status\n            setCallUnlocked(sessionState.call_unlocked);\n            \n            // Calculate progress percentage\n            const completedMissions = sessionState.missions.filter(m =\u003E m.status === 'completed');\n            const progressPercent = (completedMissions.length / sessionState.missions.length) * 100;\n            setProgress(progressPercent);\n            \n            console.log('App hydrated successfully');\n        } else {\n            // Handle cases where user hasn't submitted goal yet\n            redirectToGoalSubmission();\n        }\n    } catch (error) {\n        console.error('Failed to hydrate app:', error);\n        handleHydrationError(error);\n    }\n};\n\n// Call on app initialization\nuseEffect(() =\u003E {\n    if (accessToken) {\n        hydrateApp();\n    }\n}, [accessToken]);\n```\n\n**React State Management Example:**\n```javascript\nconst [appState, setAppState] = useState({\n    goal: null,\n    missions: [],\n    points_total: 0,\n    call_unlocked: false,\n    isHydrated: false\n});\n\nconst hydrateFromSession = async () =\u003E {\n    try {\n        const response = await fetch('/api/session', {\n            headers: { 'Authorization': `Bearer ${token}` }\n        });\n        \n        const sessionData = await response.json();\n        \n        setAppState({\n            ...sessionData,\n            isHydrated: true\n        });\n    } catch (error) {\n        setAppState(prev =\u003E ({ ...prev, isHydrated: true }));\n        // Handle error appropriately\n    }\n};\n```\n\n**Error Cases:**\n- **401 Unauthorized**: Missing or invalid Authorization header\n- **404 Not Found**: Session not found (invalid session ID in token)\n- **404 Not Found**: No session content (user hasn't submitted goal yet)\n- **500 Internal Server Error**: Session data retrieval failed\n\n**Response Fields:**\n- **goal**: Complete goal object with description, category, priority\n- **missions**: Array of missions with current status and point values\n- **points_total**: Total points earned across all completed missions\n- **call_unlocked**: Boolean indicating if premium features are available\n\n**Comparison with Other Endpoints:**\n- **vs `/api/personalised`**: This includes progress data (mission statuses, points)\n- **vs `/api/progress`**: This includes goal data and case studies\n- **vs `/api/unlock-status`**: This includes complete session context\n\n**Performance Considerations:**\n- This endpoint returns more data than specialized endpoints\n- Use sparingly - primarily for initial app hydration\n- Consider caching the result and using specific endpoints for updates\n- Avoid calling on every page navigation\n\n**Integration Patterns:**\n```javascript\n// Good: Use for initial hydration\nawait hydrateFromSession();\n\n// Good: Then use specific endpoints for updates\nawait completeMission(missionId);  // Updates mission status\nawait checkProgress();             // Gets updated progress\n\n// Avoid: Calling session endpoint repeatedly\n// Instead cache session data and use specific endpoints\n```\n\n**Error Handling Best Practices:**\n- **404 \"No session content\"**: Redirect to goal submission\n- **401 Unauthorized**: Refresh tokens or redirect to login\n- **500 errors**: Show error message and retry mechanism\n- **Network errors**: Show offline state and retry when online\n\n**State Management Integration:**\n- Perfect for Redux/Zustand store hydration\n- Use as single source of truth for initial app state\n- Update individual pieces with specific endpoint responses\n- Consider this the \"bootstrap\" data for your application",
				"operationId": "get_full_session_api_session_get",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/src__models__session__SessionResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"HTTPBearer": []
					}
				]
			}
		},
		"/api/chat": {
			"post": {
				"tags": ["Chat"],
				"summary": "Chat With Assistant",
				"description": "Continue contextual conversation with the AI assistant.\n\n**Description:**\nThis endpoint enables ongoing conversation with the AI assistant once the \npersonalized micro-site is live. The assistant maintains full context about\nthe user's progress, current page, and goals to provide relevant guidance.\n\n**When to use:**\n- When users need guidance on their AI agent project\n- For contextual help based on current page/section\n- To get mission recommendations and next steps\n- When users ask questions about their progress\n- For getting personalized advice and navigation guidance\n\n**Request Body:**\n```json\n{\n  \"message\": \"Which mission should I tackle next?\",\n  \"context\": {\n    \"page\": \"mission-dashboard\",\n    \"section\": \"mission-1\",\n    \"metadata\": { \"missionId\": \"defineMetrics\" }\n  }\n}\n```\n\n**Context Parameters:**\n- **page**: Current page identifier (e.g., \"micro-landing\", \"case-study\", \"mission-dashboard\")\n- **section**: Specific section/component (e.g., \"hero\", \"mission-3\", \"progress-widget\")  \n- **metadata**: Optional extra state like mission or case study IDs\n\n**Response Example:**\n```json\n{\n  \"reply\": \"Great—you've completed defining your metrics. Next, sketch the agent's decision flow.\",\n  \"history\": [\n    { \"role\": \"user\", \"message\": \"Done with metrics.\", \"timestamp\": \"2025-01-20T10:00:10Z\" },\n    { \"role\": \"assistant\", \"message\": \"Next, sketch the decision flow...\", \"timestamp\": \"2025-01-20T10:00:12Z\" }\n  ],\n  \"updatedProgress\": {\n    \"pointsTotal\": 15,\n    \"missions\": [\n      { \"id\": \"defineMetrics\", \"status\": \"completed\", \"points\": 15 },\n      { \"id\": \"sketchFlow\", \"status\": \"pending\", \"points\": 15 }\n    ],\n    \"callUnlocked\": false\n  },\n  \"followUpMissions\": [\n    { \"id\": \"sketchFlow\", \"title\": \"Sketch Agent Flow\", \"points\": 15 }\n  ],\n  \"suggestedRead\": [\n    { \"id\": \"cs2\", \"title\": \"Menu Recommender\", \"summary\": \"How we boosted upsell by 22%\" }\n  ],\n  \"navigate\": {\n    \"page\": \"mission-dashboard\",\n    \"section\": \"mission-2\", \n    \"metadata\": { \"missionId\": \"sketchFlow\" }\n  }\n}\n```\n\n**Response Features:**\n- **reply**: Contextual AI response based on message and current location\n- **history**: Complete chat conversation history\n- **updatedProgress**: Current mission status and points (when relevant)\n- **followUpMissions**: New missions to work on (when applicable)\n- **suggestedRead**: Recommended case studies (when helpful)\n- **navigate**: Frontend routing instruction (when appropriate)\n\n**Usage Examples:**\n\n**Get Mission Guidance:**\n```javascript\nconst response = await fetch('/api/chat', {\n  method: 'POST',\n  headers: {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    message: \"I'm stuck on defining metrics. What should I focus on?\",\n    context: {\n      page: \"mission-dashboard\",\n      section: \"mission-1\",\n      metadata: { missionId: \"defineMetrics\" }\n    }\n  })\n});\n```\n\n**Ask for Progress Update:**\n```javascript\nconst response = await fetch('/api/chat', {\n  method: 'POST', \n  headers: {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    message: \"How many points have I earned so far?\",\n    context: {\n      page: \"mission-dashboard\",\n      section: \"progress-widget\"\n    }\n  })\n});\n```\n\n**Get Case Study Recommendations:**\n```javascript\nconst response = await fetch('/api/chat', {\n  method: 'POST',\n  headers: {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    message: \"Can you show me examples similar to my project?\", \n    context: {\n      page: \"micro-landing\",\n      section: \"hero\"\n    }\n  })\n});\n```\n\n**Error Cases:**\n- **400 Bad Request**: Missing or invalid message/context fields\n  ```json\n  { \"error\": { \"code\": 400, \"message\": \"Message cannot be empty\" } }\n  ```\n- **401 Unauthorized**: Missing or invalid access token\n  ```json\n  { \"error\": { \"code\": 401, \"message\": \"Invalid token\" } }\n  ```\n- **404 Not Found**: Session not found (rare, indicates token/session mismatch)\n  ```json\n  { \"error\": { \"code\": 404, \"message\": \"Session not found\" } }\n  ```\n- **500 Internal Server Error**: AI assistant or backend failure\n  ```json\n  { \"error\": { \"code\": 500, \"message\": \"AI assistant temporarily unavailable\" } }\n  ```\n\n**Notes:**\n- Chat history is maintained server-side and returned in each response\n- The assistant uses context to provide relevant, personalized guidance\n- Optional response fields (followUpMissions, navigate, etc.) depend on message content\n- Navigation instructions help frontend show the most relevant page/section\n- All timestamps are in UTC ISO format",
				"operationId": "chat_with_assistant_api_chat_post",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChatRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ChatResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				},
				"security": [
					{
						"HTTPBearer": []
					}
				]
			}
		}
	},
	"components": {
		"schemas": {
			"AssistantMessage": {
				"properties": {
					"message": {
						"type": "string",
						"title": "Message"
					},
					"datetime": {
						"type": "string",
						"format": "date-time",
						"title": "Datetime"
					}
				},
				"type": "object",
				"required": ["message", "datetime"],
				"title": "AssistantMessage"
			},
			"CaseStudy": {
				"properties": {
					"id": {
						"type": "string",
						"title": "Id"
					},
					"title": {
						"type": "string",
						"title": "Title"
					},
					"summary": {
						"type": "string",
						"title": "Summary"
					}
				},
				"type": "object",
				"required": ["id", "title", "summary"],
				"title": "CaseStudy",
				"description": "Case study model."
			},
			"ChatContext": {
				"properties": {
					"page": {
						"type": "string",
						"title": "Page",
						"description": "Page identifier (e.g., 'micro-landing', 'case-study', 'mission-dashboard')"
					},
					"section": {
						"type": "string",
						"title": "Section",
						"description": "Subsection/component (e.g., 'hero', 'mission-3', 'progress-widget')"
					},
					"metadata": {
						"anyOf": [
							{
								"additionalProperties": true,
								"type": "object"
							},
							{
								"type": "null"
							}
						],
						"title": "Metadata",
						"description": "Extra state like caseStudyId or missionId"
					}
				},
				"type": "object",
				"required": ["page", "section"],
				"title": "ChatContext",
				"description": "Context information about where the user is on the site."
			},
			"ChatMessage": {
				"properties": {
					"role": {
						"type": "string",
						"title": "Role",
						"description": "Either 'user' or 'assistant'"
					},
					"message": {
						"type": "string",
						"title": "Message",
						"description": "The message content"
					},
					"timestamp": {
						"type": "string",
						"format": "date-time",
						"title": "Timestamp",
						"description": "When the message was sent"
					}
				},
				"type": "object",
				"required": ["role", "message", "timestamp"],
				"title": "ChatMessage",
				"description": "Individual chat message in history."
			},
			"ChatNavigation": {
				"properties": {
					"page": {
						"type": "string",
						"title": "Page",
						"description": "Target page to navigate to"
					},
					"section": {
						"type": "string",
						"title": "Section",
						"description": "Specific section on that page"
					},
					"metadata": {
						"anyOf": [
							{
								"additionalProperties": true,
								"type": "object"
							},
							{
								"type": "null"
							}
						],
						"title": "Metadata",
						"description": "Navigation parameters"
					}
				},
				"type": "object",
				"required": ["page", "section"],
				"title": "ChatNavigation",
				"description": "Navigation instruction for the frontend."
			},
			"ChatProgress": {
				"properties": {
					"pointsTotal": {
						"type": "integer",
						"title": "Pointstotal",
						"description": "Total points earned"
					},
					"missions": {
						"items": {
							"$ref": "#/components/schemas/MissionStatus"
						},
						"type": "array",
						"title": "Missions",
						"description": "All mission statuses"
					},
					"callUnlocked": {
						"type": "boolean",
						"title": "Callunlocked",
						"description": "Whether the free call is unlocked"
					}
				},
				"type": "object",
				"required": ["pointsTotal", "missions", "callUnlocked"],
				"title": "ChatProgress",
				"description": "Progress snapshot for chat response."
			},
			"ChatRequest": {
				"properties": {
					"message": {
						"type": "string",
						"minLength": 1,
						"title": "Message",
						"description": "The user's chat message"
					},
					"context": {
						"$ref": "#/components/schemas/ChatContext",
						"description": "Context about where the user is on the site"
					}
				},
				"type": "object",
				"required": ["message", "context"],
				"title": "ChatRequest",
				"description": "Request model for chat endpoint."
			},
			"ChatResponse": {
				"properties": {
					"reply": {
						"type": "string",
						"title": "Reply",
						"description": "The assistant's response text"
					},
					"history": {
						"items": {
							"$ref": "#/components/schemas/ChatMessage"
						},
						"type": "array",
						"title": "History",
						"description": "Full chat history"
					},
					"followUpMissions": {
						"anyOf": [
							{
								"items": {
									"$ref": "#/components/schemas/Mission"
								},
								"type": "array"
							},
							{
								"type": "null"
							}
						],
						"title": "Followupmissions",
						"description": "New or updated missions"
					},
					"updatedProgress": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ChatProgress"
							},
							{
								"type": "null"
							}
						],
						"description": "Progress snapshot for UI sync"
					},
					"suggestedRead": {
						"anyOf": [
							{
								"items": {
									"$ref": "#/components/schemas/CaseStudy"
								},
								"type": "array"
							},
							{
								"type": "null"
							}
						],
						"title": "Suggestedread",
						"description": "Recommended case studies"
					},
					"navigate": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ChatNavigation"
							},
							{
								"type": "null"
							}
						],
						"description": "Frontend navigation instruction"
					}
				},
				"type": "object",
				"required": ["reply", "history"],
				"title": "ChatResponse",
				"description": "Response model for chat endpoint."
			},
			"ClarifyRequest": {
				"properties": {
					"clarification": {
						"type": "string",
						"title": "Clarification"
					}
				},
				"type": "object",
				"required": ["clarification"],
				"title": "ClarifyRequest",
				"description": "Request to clarify a goal."
			},
			"ClarifyResponse": {
				"properties": {
					"goal": {
						"$ref": "#/components/schemas/Goal"
					},
					"missions": {
						"items": {
							"$ref": "#/components/schemas/Mission"
						},
						"type": "array",
						"title": "Missions"
					},
					"headline": {
						"type": "string",
						"title": "Headline"
					},
					"recommended_case_studies": {
						"items": {
							"$ref": "#/components/schemas/CaseStudy"
						},
						"type": "array",
						"title": "Recommended Case Studies"
					}
				},
				"type": "object",
				"required": [
					"goal",
					"missions",
					"headline",
					"recommended_case_studies"
				],
				"title": "ClarifyResponse",
				"description": "Response for goal clarification."
			},
			"CompleteMissionRequest": {
				"properties": {
					"mission_id": {
						"type": "string",
						"title": "Mission Id"
					},
					"artifact": {
						"$ref": "#/components/schemas/MissionArtifact"
					}
				},
				"type": "object",
				"required": ["mission_id", "artifact"],
				"title": "CompleteMissionRequest",
				"description": "Request to complete a mission."
			},
			"CompleteMissionResponse": {
				"properties": {
					"points_awarded": {
						"type": "integer",
						"title": "Points Awarded"
					},
					"points_total": {
						"type": "integer",
						"title": "Points Total"
					},
					"call_unlocked": {
						"type": "boolean",
						"title": "Call Unlocked"
					},
					"next_mission": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/Mission"
							},
							{
								"type": "null"
							}
						]
					}
				},
				"type": "object",
				"required": ["points_awarded", "points_total", "call_unlocked"],
				"title": "CompleteMissionResponse",
				"description": "Response for mission completion."
			},
			"Goal": {
				"properties": {
					"description": {
						"type": "string",
						"title": "Description"
					},
					"category": {
						"type": "string",
						"title": "Category",
						"default": "general"
					},
					"priority": {
						"type": "string",
						"title": "Priority",
						"default": "medium"
					}
				},
				"type": "object",
				"required": ["description"],
				"title": "Goal",
				"description": "Structured goal model."
			},
			"GoalRequest": {
				"properties": {
					"input": {
						"type": "string",
						"title": "Input"
					}
				},
				"type": "object",
				"required": ["input"],
				"title": "GoalRequest",
				"description": "Request to submit a goal."
			},
			"GoalResponse": {
				"properties": {
					"assistantMessage": {
						"$ref": "#/components/schemas/AssistantMessage"
					},
					"history": {
						"items": {
							"$ref": "#/components/schemas/History"
						},
						"type": "array",
						"title": "History"
					}
				},
				"type": "object",
				"required": ["assistantMessage", "history"],
				"title": "GoalResponse",
				"description": "Response for goal submission."
			},
			"HTTPValidationError": {
				"properties": {
					"detail": {
						"items": {
							"$ref": "#/components/schemas/ValidationError"
						},
						"type": "array",
						"title": "Detail"
					}
				},
				"type": "object",
				"title": "HTTPValidationError"
			},
			"History": {
				"properties": {
					"role": {
						"type": "string",
						"title": "Role"
					},
					"message": {
						"type": "string",
						"title": "Message"
					},
					"datetime": {
						"type": "string",
						"format": "date-time",
						"title": "Datetime"
					}
				},
				"type": "object",
				"required": ["role", "message", "datetime"],
				"title": "History"
			},
			"Mission": {
				"properties": {
					"id": {
						"type": "string",
						"title": "Id"
					},
					"title": {
						"type": "string",
						"title": "Title"
					},
					"points": {
						"type": "integer",
						"title": "Points"
					},
					"status": {
						"type": "string",
						"title": "Status",
						"default": "pending"
					}
				},
				"type": "object",
				"required": ["id", "title", "points"],
				"title": "Mission",
				"description": "Mission model."
			},
			"MissionArtifact": {
				"properties": {
					"answer": {
						"type": "string",
						"title": "Answer"
					}
				},
				"type": "object",
				"required": ["answer"],
				"title": "MissionArtifact",
				"description": "Mission completion artifact."
			},
			"MissionStatus": {
				"properties": {
					"id": {
						"type": "string",
						"title": "Id"
					},
					"status": {
						"type": "string",
						"title": "Status"
					},
					"points": {
						"type": "integer",
						"title": "Points"
					}
				},
				"type": "object",
				"required": ["id", "status", "points"],
				"title": "MissionStatus",
				"description": "Mission with status."
			},
			"PersonalizedResponse": {
				"properties": {
					"headline": {
						"type": "string",
						"title": "Headline"
					},
					"goal": {
						"$ref": "#/components/schemas/Goal"
					},
					"missions": {
						"items": {
							"$ref": "#/components/schemas/Mission"
						},
						"type": "array",
						"title": "Missions"
					},
					"recommended_case_studies": {
						"items": {
							"$ref": "#/components/schemas/CaseStudy"
						},
						"type": "array",
						"title": "Recommended Case Studies"
					}
				},
				"type": "object",
				"required": [
					"headline",
					"goal",
					"missions",
					"recommended_case_studies"
				],
				"title": "PersonalizedResponse",
				"description": "Response for personalized content."
			},
			"ProgressResponse": {
				"properties": {
					"points_total": {
						"type": "integer",
						"title": "Points Total"
					},
					"missions": {
						"items": {
							"$ref": "#/components/schemas/MissionStatus"
						},
						"type": "array",
						"title": "Missions"
					},
					"call_unlocked": {
						"type": "boolean",
						"title": "Call Unlocked"
					}
				},
				"type": "object",
				"required": ["points_total", "missions", "call_unlocked"],
				"title": "ProgressResponse",
				"description": "Response for progress endpoint."
			},
			"RefreshRequest": {
				"properties": {
					"refresh_token": {
						"type": "string",
						"title": "Refresh Token"
					}
				},
				"type": "object",
				"required": ["refresh_token"],
				"title": "RefreshRequest",
				"description": "Request to refresh tokens."
			},
			"RefreshResponse": {
				"properties": {
					"access_token": {
						"type": "string",
						"title": "Access Token"
					},
					"expires_in": {
						"type": "integer",
						"title": "Expires In"
					},
					"refresh_token": {
						"type": "string",
						"title": "Refresh Token"
					},
					"refresh_expires_in": {
						"type": "integer",
						"title": "Refresh Expires In"
					}
				},
				"type": "object",
				"required": [
					"access_token",
					"expires_in",
					"refresh_token",
					"refresh_expires_in"
				],
				"title": "RefreshResponse",
				"description": "Response for token refresh."
			},
			"RevokeRequest": {
				"properties": {
					"refresh_token": {
						"type": "string",
						"title": "Refresh Token"
					}
				},
				"type": "object",
				"required": ["refresh_token"],
				"title": "RevokeRequest",
				"description": "Request to revoke a refresh token."
			},
			"RevokeResponse": {
				"properties": {
					"revoked": {
						"type": "boolean",
						"title": "Revoked"
					}
				},
				"type": "object",
				"required": ["revoked"],
				"title": "RevokeResponse",
				"description": "Response for token revocation."
			},
			"UnlockStatusResponse": {
				"properties": {
					"call_unlocked": {
						"type": "boolean",
						"title": "Call Unlocked"
					}
				},
				"type": "object",
				"required": ["call_unlocked"],
				"title": "UnlockStatusResponse",
				"description": "Response for unlock status check."
			},
			"ValidationError": {
				"properties": {
					"loc": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "integer"
								}
							]
						},
						"type": "array",
						"title": "Location"
					},
					"msg": {
						"type": "string",
						"title": "Message"
					},
					"type": {
						"type": "string",
						"title": "Error Type"
					}
				},
				"type": "object",
				"required": ["loc", "msg", "type"],
				"title": "ValidationError"
			},
			"src__models__auth__SessionResponse": {
				"properties": {
					"access_token": {
						"type": "string",
						"title": "Access Token"
					},
					"expires_in": {
						"type": "integer",
						"title": "Expires In"
					},
					"refresh_token": {
						"type": "string",
						"title": "Refresh Token"
					},
					"refresh_expires_in": {
						"type": "integer",
						"title": "Refresh Expires In"
					}
				},
				"type": "object",
				"required": [
					"access_token",
					"expires_in",
					"refresh_token",
					"refresh_expires_in"
				],
				"title": "SessionResponse",
				"description": "Response for creating a new session."
			},
			"src__models__session__SessionResponse": {
				"properties": {
					"goal": {
						"$ref": "#/components/schemas/Goal"
					},
					"missions": {
						"items": {
							"$ref": "#/components/schemas/MissionStatus"
						},
						"type": "array",
						"title": "Missions"
					},
					"points_total": {
						"type": "integer",
						"title": "Points Total"
					},
					"call_unlocked": {
						"type": "boolean",
						"title": "Call Unlocked"
					}
				},
				"type": "object",
				"required": [
					"goal",
					"missions",
					"points_total",
					"call_unlocked"
				],
				"title": "SessionResponse",
				"description": "Response for full session hydration."
			}
		},
		"securitySchemes": {
			"HTTPBearer": {
				"type": "http",
				"scheme": "bearer"
			}
		}
	}
}
